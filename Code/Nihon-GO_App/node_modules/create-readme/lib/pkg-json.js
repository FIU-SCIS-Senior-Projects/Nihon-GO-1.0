// Generated by CoffeeScript 1.10.0
(function() {
  var PackageJSONReader, Promise, fs, githubUrl2Obj, logger, path;

  Promise = require('bluebird');

  logger = require('./logger');

  fs = require('fs');

  path = require('path');

  githubUrl2Obj = require('github-url-to-object');

  module.exports = PackageJSONReader = (function() {
    var GITHUB_URL_REGEXP;

    GITHUB_URL_REGEXP = /.*github\.com\/([\w-_\.]+)\/([\w-_\.]+)(?:\.git)/;

    function PackageJSONReader(options) {
      var base, base1, base2;
      this.options = options;
      if (this.options == null) {
        this.options = {};
      }
      if ((base = this.options).packagePath == null) {
        base.packagePath = './package.json';
      }
      if ((base1 = this.options).encoding == null) {
        base1.encoding = 'utf-8';
      }
      if ((base2 = this.options).fieldsNeeded == null) {
        base2.fieldsNeeded = ['name', 'version', 'description'];
      }
    }

    PackageJSONReader.prototype.read = function() {
      var error, fieldName, i, len, pkg, pkgPath, ref, ref1, ref2, ref3;
      pkgPath = path.join(process.cwd(), this.options.packagePath);
      logger.debug("Reading package.json from " + pkgPath);
      pkg = JSON.parse(fs.readFileSync(pkgPath, {
        encoding: this.options.encoding
      }));
      ref = this.options.fieldsNeeded;
      for (i = 0, len = ref.length; i < len; i++) {
        fieldName = ref[i];
        if (pkg[fieldName] == null) {
          throw new Error('package.json ' + fieldName + ' field has to be defined');
        }
      }
      if (((ref1 = pkg.repository) != null ? ref1.type : void 0) === 'git') {
        try {
          pkg.git = githubUrl2Obj(pkg.repository.url);
          if (!(((ref2 = pkg.git.user) != null ? ref2.length : void 0) > 0 && ((ref3 = pkg.git.repo) != null ? ref3.length : void 0) > 0)) {
            pkg.git = void 0;
            logger.warn('No git repository defined');
          }
        } catch (error) {
          throw new Error('package.json repository.url cannot be parsed');
        }
      }
      return pkg;
    };

    return PackageJSONReader;

  })();

}).call(this);
