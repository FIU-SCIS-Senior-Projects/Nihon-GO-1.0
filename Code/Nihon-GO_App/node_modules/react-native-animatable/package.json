{
  "_args": [
    [
      {
        "raw": "react-native-animatable@^1.2.4",
        "scope": null,
        "escapedName": "react-native-animatable",
        "name": "react-native-animatable",
        "rawSpec": "^1.2.4",
        "spec": ">=1.2.4 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\user1\\Nihon-GO-1.0\\Code\\Nihon-GO_App\\node_modules\\react-native-modal"
    ]
  ],
  "_from": "react-native-animatable@>=1.2.4 <2.0.0",
  "_id": "react-native-animatable@1.2.4",
  "_inCache": true,
  "_location": "/react-native-animatable",
  "_nodeVersion": "8.1.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-animatable-1.2.4.tgz_1505775478612_0.04069930175319314"
  },
  "_npmUser": {
    "name": "oblador",
    "email": "joel@oblador.se"
  },
  "_npmVersion": "5.4.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-animatable@^1.2.4",
    "scope": null,
    "escapedName": "react-native-animatable",
    "name": "react-native-animatable",
    "rawSpec": "^1.2.4",
    "spec": ">=1.2.4 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-native-modal"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-animatable/-/react-native-animatable-1.2.4.tgz",
  "_shasum": "b5fb7657e8f6edadbc26697057a327fb920b3039",
  "_shrinkwrap": null,
  "_spec": "react-native-animatable@^1.2.4",
  "_where": "C:\\Users\\user1\\Nihon-GO-1.0\\Code\\Nihon-GO_App\\node_modules\\react-native-modal",
  "author": {
    "name": "Joel Arvidsson",
    "email": "joel@oblador.se"
  },
  "bugs": {
    "url": "https://github.com/oblador/react-native-animatable/issues"
  },
  "dependencies": {
    "prop-types": "^15.5.10"
  },
  "description": "Easy to use declarative transitions and animations for React Native",
  "devDependencies": {
    "babel": "^6.5.2",
    "babel-eslint": "^7.0.0",
    "babel-jest": "^20.0.3",
    "babel-preset-react-native": "^1.9.0",
    "eslint": "^3.7.1",
    "eslint-config-airbnb": "^15.0.1",
    "eslint-plugin-import": "^2.3.0",
    "eslint-plugin-jsx-a11y": "^5.0.3",
    "eslint-plugin-react": "^7.0.1",
    "jest": "20.0.4",
    "jest-cli": "20.0.4",
    "jest-react-native": "18.0.0",
    "prettier": "^1.3.1",
    "react": "*",
    "react-native": "*",
    "react-test-renderer": "15.5.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-cVTQXa/cp8gfxcl+l6I1rGAI7EeoNZ0ur9vtxb3tD5iGlJbIyUfQK61e6BycnZewdgQ639Mp6OrueXTpZlv76Q==",
    "shasum": "b5fb7657e8f6edadbc26697057a327fb920b3039",
    "tarball": "https://registry.npmjs.org/react-native-animatable/-/react-native-animatable-1.2.4.tgz"
  },
  "gitHead": "ae9ba13693b4116a194d05ef8411570135ccb7ba",
  "homepage": "https://github.com/oblador/react-native-animatable",
  "jest": {
    "preset": "jest-react-native",
    "modulePathIgnorePatterns": [
      "<rootDir>/Example/"
    ]
  },
  "keywords": [
    "react-native",
    "react-component",
    "react-native-component",
    "react",
    "mobile",
    "ios",
    "android",
    "ui",
    "fade",
    "bounce",
    "slide",
    "animatable",
    "transition",
    "animation"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "oblador",
      "email": "joel@oblador.se"
    }
  ],
  "name": "react-native-animatable",
  "optionalDependencies": {},
  "readme": "# react-native-animatable\nEasy to use declarative transitions and a standard set of animations for React Native\n\n## Installation\n\n`$ npm install react-native-animatable --save`\n\n## Usage\n\nTo animate things you must use the `createAnimatableComponent` composer similar to the `Animated.createAnimatedComponent`. The common components `View`, `Text` and `Image` are precomposed and exposed under the `Animatable` namespace. If you have your own component that you wish to animate, simply wrap it with a `Animatable.View` or compose it with:\n\n```js\nimport * as Animatable from 'react-native-animatable';\nMyCustomComponent = Animatable.createAnimatableComponent(MyCustomComponent);\n```\n\n### Declarative Usage\n\n#### Animations\n\n```html\n<Animatable.Text animation=\"zoomInUp\">Zoom me up, Scotty</Animatable.Text>\n```\n\n#### Looping\n\nTo make looping animations simply set the `iterationCount` to `infinite`. Most animations except the attention seekers work best when setting `direction` to `alternate`. \n\n```html\n<Animatable.Text animation=\"slideInDown\" iterationCount={5} direction=\"alternate\">Up and down you go</Animatable.Text>\n<Animatable.Text animation=\"pulse\" easing=\"ease-out\" iterationCount=\"infinite\" style={{ textAlign: 'center' }}>❤️</Animatable.Text>\n```\n\n![Animatable looping demo](https://cloud.githubusercontent.com/assets/378279/10716023/9f4a6670-7b00-11e5-944c-d52a1dcf0884.gif)\n\n#### Generic transitions\n\nYou can create your own simple transitions of a style property of your own choosing. The following example will increase the font size by 5 for every tap – all animated, all declarative! If you don't supply a `duration` property, a spring animation will be used. \n\n*Note: If you are using colors, please use `rgba()` syntax.*\n\n*Note: Transitions require `StyleSheet.flatten` available in React Native 0.15 or later. If you are running on anything lower, please polyfill as described under imperative usage.*\n\n\n```html\n<TouchableOpacity onPress={() => this.setState({fontSize: (this.state.fontSize || 10) + 5 })}>\n  <Animatable.Text transition=\"fontSize\" style={{fontSize: this.state.fontSize || 10}}>Size me up, Scotty</Animatable.Text>\n</TouchableOpacity>\n```\n\n#### Properties\n*Note: Other properties will be passed down to underlying component.*\n\n| Prop | Description | Default |\n|---|---|---|\n|**`animation`**|Name of the animation, see below for available animations. |*None*|\n|**`duration`**|For how long the animation will run (milliseconds). |`1000`|\n|**`delay`**|Optionally delay animation (milliseconds). |`0`|\n|**`direction`**|Direction of animation, especially useful for repeating animations. Valid values: `normal`, `reverse`, `alternate`, `alternate-reverse`. |`normal`|\n|**`easing`**|Timing function for the animation. Valid values: custom function or `linear`, `ease`, `ease-in`, `ease-out`, `ease-in-out`, `ease-in-cubic`, `ease-out-cubic`, `ease-in-out-cubic`, `ease-in-circ`, `ease-out-circ`, `ease-in-out-circ`, `ease-in-expo`, `ease-out-expo`, `ease-in-out-expo`, `ease-in-quad`, `ease-out-quad`, `ease-in-out-quad`, `ease-in-quart`, `ease-out-quart`, `ease-in-out-quart`, `ease-in-quint`, `ease-out-quint`, `ease-in-out-quint`, `ease-in-sine`, `ease-out-sine`, `ease-in-out-sine`, `ease-in-back`, `ease-out-back`, `ease-in-out-back`. |`ease`|\n|**`iterationCount`**|How many times to run the animation, use `infinite` for looped animations. |`1`|\n|**`transition`**|What `style` property to transition, for example `opacity`, `rotate` or `fontSize`. Use array for multiple properties.  |*None*|\n|**`onAnimationBegin`**|A function that is called when the animation has been started. |*None*|\n|**`onAnimationEnd`**|A function that is called when the animation has been completed successfully or cancelled. Function is called with an `endState` argument, refer to `endState.finished` to see if the animation completed or not. |*None*|\n|**`useNativeDriver`**|Whether to use native or JavaScript animation driver. Native driver can help with performance but cannot handle all types of styling and requires you to integrate that module on iOS.  |`false`|\n\n### Imperative Usage\n\n\n#### Animations\n\nAll animations are exposed as functions on Animatable elements, they take an optional `duration` argument. They return a promise that is resolved when animation completes successfully or is cancelled. \n\n```js\nimport * as Animatable from 'react-native-animatable';\n\nclass ExampleView extends Component {\n  render() {\n    return (\n      <TouchableWithoutFeedback onPress={() => this.refs.view.bounce(800).then((endState) => console.log(endState.finished ? 'bounce finished' : 'bounce cancelled');}>\n        <Animatable.View ref=\"view\">\n          <Text>Bounce me!</Text>\n        </Animatable.View>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n```\n\nTo stop any ongoing animations, just invoke `stopAnimation()` on that element. \n\n#### Generic transitions\n\n##### `transition(fromValues, toValues[[, duration], easing])`\n\nWill transition between given styles. If no `duration` or `easing` is passed a spring animation will be used. \n\n##### `transitionTo(toValues[[, duration], easing])`\n\nThis function will try to determine the current styles and pass it along to `transition()` as `fromValues`. \n\n```js\nimport * as Animatable from 'react-native-animatable';\n\nclass ExampleView extends Component {\n  render() {\n    return (\n      <TouchableWithoutFeedback onPress={() => this.refs.text.transitionTo({opacity: 0.2});}>\n        <Animatable.Text ref=\"text\">Fade me!</Animatable.Text>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n```\n\n## Custom Animations\n\nAnimations can be referred to by a global name or a definition object. \n\n### Animation Definition Schema\n\nAn animation definition is a plain object that contains an optional `easing` property, an optional `style` property for static non-animated styles (useful for `perspective`, `backfaceVisibility`, `zIndex` etc) and a list of keyframes. The keyframes are refered to by a number between 0 to 1 or `from` and `to`. Inspect the source in the `definitions` folder to see more in depth examples. \n\nA simple fade in animation: \n\n```js\nconst fadeIn = {\n  from: {\n    opacity: 0,\n  },\n  to: {\n    opacity: 1,\n  },\n};\n```\n\nCombining multiple styles to create a zoom out animation: \n\n```js\nconst zoomOut = {\n  0: {\n    opacity: 1,\n    scale: 1,\n  },\n  0.5: {\n    opacity: 1,\n    scale: 0.3,\n  },\n  1: {\n    opacity: 0,\n    scale: 0,\n  },\n};\n```\n\nTo make your animations globally available by referring to them by a name, you can register them with `initializeRegistryWithDefinitions`. This function can also be used to replace built in animations in case you want to tweak some value. \n\n```js\nAnimatable.initializeRegistryWithDefinitions({\n  myFancyAnimation: {\n    from: { ... },\n    to: { ... },\n  }\n});\n```\n\n## Demo / Example\n\nSee `Example` folder. \n\n![animatable-demo](https://cloud.githubusercontent.com/assets/378279/10629128/3c373324-779a-11e5-8311-a3a489575b75.gif)\n\n## Animations\n\nAnimations are heavily inspired by [Animated.css](https://daneden.github.io/animate.css/).\n\n### Attention Seekers\n\n![animatable-attention](https://cloud.githubusercontent.com/assets/378279/10590307/ef73b1ba-767d-11e5-8fb9-9779d3a53a50.gif)\n\n* `bounce`\n* `flash`\n* `jello`\n* `pulse`\n* `rotate`\n* `rubberBand`\n* `shake`\n* `swing`\n* `tada`\n* `wobble`\n\n### Bouncing Entrances\n\n![animatable-bouncein](https://cloud.githubusercontent.com/assets/378279/10590306/ef572bbc-767d-11e5-8440-8e61d401537a.gif)\n\n* `bounceIn`\n* `bounceInDown`\n* `bounceInUp`\n* `bounceInLeft`\n* `bounceInRight`\n\n### Bouncing Exits\n\n![animatable-bounceout](https://cloud.githubusercontent.com/assets/378279/10590305/ef56e4cc-767d-11e5-9562-6cd3210faf34.gif)\n\n* `bounceOut`\n* `bounceOutDown`\n* `bounceOutUp`\n* `bounceOutLeft`\n* `bounceOutRight`\n\n### Fading Entrances\n\n![animatable-fadein](https://cloud.githubusercontent.com/assets/378279/10590304/ef4f09b4-767d-11e5-9a43-06e97e8ee2c1.gif)\n\n* `fadeIn`\n* `fadeInDown`\n* `fadeInDownBig`\n* `fadeInUp`\n* `fadeInUpBig`\n* `fadeInLeft`\n* `fadeInLeftBig`\n* `fadeInRight`\n* `fadeInRightBig`\n\n### Fading Exits\n\n![animatable-fadeout](https://cloud.githubusercontent.com/assets/378279/10590303/ef3e9598-767d-11e5-83bc-bd48d6017131.gif)\n\n* `fadeOut`\n* `fadeOutDown`\n* `fadeOutDownBig`\n* `fadeOutUp`\n* `fadeOutUpBig`\n* `fadeOutLeft`\n* `fadeOutLeftBig`\n* `fadeOutRight`\n* `fadeOutRightBig`\n\n### Flippers\n\n![animatable-flip](https://cloud.githubusercontent.com/assets/378279/10590296/ef3076ca-767d-11e5-9f62-6b9c696dad51.gif)\n\n* `flipInX`\n* `flipInY`\n* `flipOutX`\n* `flipOutY`\n\n### Lightspeed\n\n![animatable-lightspeed](https://cloud.githubusercontent.com/assets/378279/10590301/ef374c8e-767d-11e5-83ad-b249d2731f43.gif)\n\n* `lightSpeedIn`\n* `lightSpeedOut`\n\n### Sliding Entrances\n\n![animatable-slidein](https://cloud.githubusercontent.com/assets/378279/10590300/ef36dfe2-767d-11e5-932b-1cccce78087b.gif)\n\n* `slideInDown`\n* `slideInUp`\n* `slideInLeft`\n* `slideInRight`\n\n### Sliding Exits\n\n![animatable-slideout](https://cloud.githubusercontent.com/assets/378279/10590299/ef35a3ca-767d-11e5-94e0-441fd49b6444.gif)\n\n* `slideOutDown`\n* `slideOutUp`\n* `slideOutLeft`\n* `slideOutRight`\n\n### Zooming Entrances\n\n![animatable-zoomin](https://cloud.githubusercontent.com/assets/378279/10590302/ef37d438-767d-11e5-8480-a212e21c2192.gif)\n\n* `zoomIn`\n* `zoomInDown`\n* `zoomInUp`\n* `zoomInLeft`\n* `zoomInRight`\n\n### Zooming Exits\n\n![animatable-zoomout](https://cloud.githubusercontent.com/assets/378279/10590298/ef33fa52-767d-11e5-80fe-6b8dbb5e53d0.gif)\n\n* `zoomOut`\n* `zoomOutDown`\n* `zoomOutUp`\n* `zoomOutLeft`\n* `zoomOutRight`\n\n## [Changelog](https://github.com/oblador/react-native-animatable/releases)\n\n## License\n\n[MIT License](http://opensource.org/licenses/mit-license.html). © Joel Arvidsson 2015\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/oblador/react-native-animatable.git"
  },
  "scripts": {
    "format": "prettier --single-quote --trailing-comma all --write {,definitions/,__tests__}*.js",
    "jest": "jest",
    "jest:watch": "npm run jest -- --watch",
    "lint": "eslint ./*.js",
    "test": "npm run lint && npm run jest"
  },
  "typings": "typings/react-native-animatable.d.ts",
  "version": "1.2.4"
}
