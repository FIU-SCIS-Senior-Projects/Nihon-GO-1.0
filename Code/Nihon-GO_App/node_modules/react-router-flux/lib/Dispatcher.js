'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _Input = require('./Input');

var _Input2 = _interopRequireDefault(_Input);

var _Action = require('./Action');

var _Action2 = _interopRequireDefault(_Action);

var _View = require('./View');

var _View2 = _interopRequireDefault(_View);

var _upperFirst = require('lodash/upperFirst');

var _upperFirst2 = _interopRequireDefault(_upperFirst);

var _isFunction = require('lodash/isFunction');

var _isFunction2 = _interopRequireDefault(_isFunction);

var _reactRouter = require('react-router');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RouteWrapper = function (_React$Component) {
  _inherits(RouteWrapper, _React$Component);

  function RouteWrapper() {
    _classCallCheck(this, RouteWrapper);

    return _possibleConstructorReturn(this, (RouteWrapper.__proto__ || Object.getPrototypeOf(RouteWrapper)).apply(this, arguments));
  }

  _createClass(RouteWrapper, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props$route = this.props.route,
          model = _props$route.model,
          defaultModel = _props$route.defaultModel,
          actions = _props$route.actions,
          originComponent = _props$route.originComponent;
      var router = this.context.router;


      var componentProps = {};

      Object.keys(model).forEach(function (name) {
        var value = model[name];

        if ((0, _isFunction2.default)(value)) {
          var _props = _this2.props,
              location = _props.location,
              params = _props.params;

          var query = location.query || {};
          var state = location.state || {};
          var result = value({ params: params, query: query, state: state });
          if (result !== undefined) {
            componentProps[name] = result;
          }
        } else if (value !== undefined) {
          componentProps[name] = value;
        }
      });

      Object.keys(defaultModel).forEach(function (name) {
        if (componentProps[name] == undefined) {
          var value = defaultModel[name];

          if ((0, _isFunction2.default)(value)) {
            var _props2 = _this2.props,
                location = _props2.location,
                params = _props2.params;

            var query = location.query || {};
            var state = location.state || {};
            var result = value({ params: params, query: query, state: state });
            if (result !== undefined) {
              componentProps[name] = result;
            }
          } else if (value !== undefined) {
            componentProps[name] = value;
          }
        }
      });

      actions.forEach(function (action) {
        var on = action.on,
            to = action.to,
            state = action.state,
            query = action.query,
            params = action.params;


        var eventName = 'on' + (0, _upperFirst2.default)(on);
        componentProps[eventName] = function (values) {
          var formatParams = {};
          if (params) {
            if ((0, _isFunction2.default)(params)) {
              formatParams = params(values);
            } else {
              formatParams = params;
            }
          }
          var pathname = (0, _reactRouter.formatPattern)(to, formatParams);
          var route = { pathname: pathname };
          if (state) {
            if ((0, _isFunction2.default)(state)) {
              route.state = state(values);
            } else {
              route.state = state;
            }
          }

          if (query) {
            if ((0, _isFunction2.default)(query)) {
              route.query = query(values);
            } else {
              route.query = query;
            }
          }
          router.push(route);
        };
      });

      return _react2.default.createElement(originComponent, componentProps);
    }
  }]);

  return RouteWrapper;
}(_react2.default.Component);

/**
 * A <Dispatcher> is used to declare route rules
 */


RouteWrapper.contextTypes = {
  router: _react2.default.PropTypes.object.isRequired
};

var Dispatcher = function (_React$Component2) {
  _inherits(Dispatcher, _React$Component2);

  function Dispatcher() {
    _classCallCheck(this, Dispatcher);

    return _possibleConstructorReturn(this, (Dispatcher.__proto__ || Object.getPrototypeOf(Dispatcher)).apply(this, arguments));
  }

  _createClass(Dispatcher, [{
    key: 'render',
    value: function render() {
      (0, _invariant2.default)(false, '<Dispatcher> elements are for router configuration only and should not be rendered');
    }
  }], [{
    key: 'createRouteFromReactElement',
    value: function createRouteFromReactElement(element) {
      var _element$props = element.props,
          children = _element$props.children,
          component = _element$props.component;


      var defaultModel = {};

      var actions = [];
      var views = [];

      _react2.default.Children.forEach(children, function (element) {
        if (element.type === _Input2.default) {
          var _element$props2 = element.props,
              name = _element$props2.name,
              value = _element$props2.value;

          defaultModel[name] = value;
        } else if (element.type === _View2.default) {
          var _element$props3 = element.props,
              path = _element$props3.path,
              _children = _element$props3.children;


          var model = {};

          if (_children) {
            _react2.default.Children.forEach(_children, function (element) {
              if (element.type === _Input2.default) {
                var _element$props4 = element.props,
                    _name = _element$props4.name,
                    _value = _element$props4.value;

                model[_name] = _value;
              } else {
                throw new Error('Illegal use element ' + element.type.name + ' in View, expected [Input]');
              }
            });
          }

          views.push({ path: path, model: model });
        } else if (element.type === _Action2.default) {
          var _element$props5 = element.props,
              on = _element$props5.on,
              to = _element$props5.to,
              query = _element$props5.query,
              state = _element$props5.state,
              params = _element$props5.params;

          actions.push({ on: on, to: to, query: query, state: state, params: params });
        } else {
          throw new Error('Illegal use element ' + element.type.name + ' in Dispatcher, expected [Input, View, Action]');
        }
      });

      return {
        childRoutes: views.map(function (_ref) {
          var path = _ref.path,
              model = _ref.model;

          return {
            model: model,
            defaultModel: defaultModel,
            actions: actions,
            path: path,
            originComponent: component,
            component: RouteWrapper
          };
        })
      };
    }
  }]);

  return Dispatcher;
}(_react2.default.Component);

Dispatcher.propTypes = {
  /**
   * React component
   */
  component: _react2.default.PropTypes.func.isRequired
};
exports.default = Dispatcher;
module.exports = exports['default'];