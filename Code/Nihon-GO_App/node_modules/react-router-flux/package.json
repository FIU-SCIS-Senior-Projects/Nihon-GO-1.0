{
  "_args": [
    [
      {
        "raw": "react-router-flux@^1.0.0",
        "scope": null,
        "escapedName": "react-router-flux",
        "name": "react-router-flux",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\user1\\Nihon-GO-1.0\\Code\\Nihon-GO_App"
    ]
  ],
  "_from": "react-router-flux@>=1.0.0 <2.0.0",
  "_id": "react-router-flux@1.0.0",
  "_inCache": true,
  "_location": "/react-router-flux",
  "_nodeVersion": "7.3.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/react-router-flux-1.0.0.tgz_1487796805212_0.7134328137617558"
  },
  "_npmUser": {
    "name": "divin",
    "email": "divin.dmitry@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {
    "create-react-class": "15.6.3",
    "fbjs": "0.8.16",
    "loose-envify": "1.3.1",
    "object-assign": "4.1.1",
    "prop-types": "15.6.1"
  },
  "_requested": {
    "raw": "react-router-flux@^1.0.0",
    "scope": null,
    "escapedName": "react-router-flux",
    "name": "react-router-flux",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-router-flux/-/react-router-flux-1.0.0.tgz",
  "_shasum": "76b7314c3e9eda1e80669260e1b723bbe544799b",
  "_shrinkwrap": null,
  "_spec": "react-router-flux@^1.0.0",
  "_where": "C:\\Users\\user1\\Nihon-GO-1.0\\Code\\Nihon-GO_App",
  "author": {
    "name": "Dmitry Divin"
  },
  "bugs": {
    "url": "https://github.com/dmitrydivin/react-router-flux/issues"
  },
  "dependencies": {
    "invariant": "^2.2.1",
    "lodash": "^4.15.0",
    "react": "^15.4.2",
    "react-router": "^v3.0.1"
  },
  "description": "Powerful extension for react-router to declare routes.",
  "devDependencies": {
    "babel-cli": "^6.18.0",
    "babel-core": "^6.14.0",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-preset-es2015": "6.9.0",
    "babel-preset-react": "6.5.0",
    "babel-preset-stage-0": "6.5.0",
    "cross-env": "^3.1.4",
    "expect": "^1.20.2",
    "istanbul": "1.0.0-alpha.2",
    "jsdom": "9.8.3",
    "jsdom-global": "^2.1.1",
    "mocha": "^3.1.2",
    "react-dom": "^15.4.2",
    "rimraf": "^2.5.4"
  },
  "directories": {},
  "dist": {
    "shasum": "76b7314c3e9eda1e80669260e1b723bbe544799b",
    "tarball": "https://registry.npmjs.org/react-router-flux/-/react-router-flux-1.0.0.tgz"
  },
  "email": "divin.dmitry@gmail.com",
  "fiels": [
    "*.md",
    "lib",
    "es"
  ],
  "gitHead": "4f00715a3f3aa5533f55ff19b789021efb7ffccb",
  "homepage": "https://github.com/dmitrydivin/react-router-flux#readme",
  "jsnext:main": "es/index",
  "license": "MIT",
  "main": "lib/index",
  "maintainers": [
    {
      "name": "divin",
      "email": "divin.dmitry@gmail.com"
    }
  ],
  "name": "react-router-flux",
  "optionalDependencies": {},
  "readme": "Powerful extension for [react-router](https://github.com/ReactTraining/react-router) to declare routes.\r\n\r\n### Installation\r\n\r\nUsing [npm](https://www.npmjs.com/):\r\n\r\n\r\n```sh\r\n$ npm install --save react-router-flux\r\n```\r\n\r\nAnd then you can import components as follows:\r\n\r\n```javascript\r\n// using an ES6 transpiler, like babel\r\nimport { Dispatcher, View, Action, Input } from 'react-router-flux';\r\n\r\n\r\n// not using an ES6 transpiler\r\nvar Dispatcher = require('react-router-flux').Dispatcher;\r\nvar View = require('react-router-flux').View;\r\nvar Action = require('react-router-flux').Action;\r\nvar Input = require('react-router-flux').Input;\r\n```\r\n\r\n### Declare route dispatcher\r\n\r\n```javascript\r\n<Dispatcher component={ReactClass}/>\r\n```\r\n\r\n### Props\r\n| Property | Type         | Required | Description       |\r\n|:---------|:-------------|:---------|:------------------|\r\n|component | `ReactClass` | yes      | A React component |\r\n\r\n### Declare view-state\r\n\r\nThe declaration can define in Dispatcher inside only\r\n\r\n```javascript\r\n<View path={String}/> \r\n\r\n```\r\n\r\n### Props\r\n| Property | Type    | Required | Description         |\r\n|:---------|:--------|:---------|:--------------------|\r\n|path      | `String`| yes      | Route path          |\r\n\r\n\r\n### Declare inbound parameter into view-state\r\n\r\nThe declaration can define in a View inside and in a Dispatcher too, but as default value and can be overridden.\r\n\r\n```javascript\r\n<Input name={String} value={Any}/>\r\n```\r\n\r\n### Props\r\n| Property | Type    | Required | Description         |\r\n|:---------|:--------|:---------|:--------------------|\r\n|name      | `String`| yes      | Input property name |\r\n|value     | `Any`   | no       | Input property value|\r\n\r\n> **Note**: If the value define as Function you can access to route variables 'params', 'query' and 'state', see below example.\r\n\r\n### Declare transition\r\n\r\nThe declaration can define in Dispatcher inside only\r\n\r\n```javascript\r\n<Action on={String} to={String} query={Function|Object} \r\n                                state={Function|Object} \r\n                                params={Function|Object}/>\r\n```\r\n\r\n### Props\r\n| Property | Type                   | Required | Description                              |\r\n|:---------|:-----------------------|:---------|:-----------------------------------------|\r\n|on        | `String`               | yes      | Event ID of the component                |\r\n|to        | `String`               | yes      | Redirect Route path                      |\r\n|query     | `Function` or `Object` | no       | Define query params for the Route path   |\r\n|state     | `Function` or `Object` | no       | Define route state for the Router        |\r\n|params    | `Function` or `Object` | no       | Define params for the Route path         |\r\n\r\n\r\n### How Does It Use?\r\n\r\n```javascript\r\nclass TodoMVC extends React.Component {\r\n  render() {\r\n    let {\r\n      filter, /** filter parameter **/\r\n      onFilter, /** to go to /todomvc/active when onFilter({filter: 'active'}) **/\r\n      onFilterNotFound  /** to go to /error/404 **/\r\n    } = this.props;\r\n    //...\r\n  }\r\n};\r\n\r\n//store filter variable as path parameter\r\n//  `/todomvc`        ->   <TodoMVC filter=\"all\"/>\r\n//  `/todomvc/active` ->   <TodoMVC filter=\"active\"/>\r\nconst mapping_v1 = (\r\n  <Router>\r\n    <Dispatcher component={TodoMVC}>\r\n      {/*as default value*/}\r\n      <Input name=\"filter\" value=\"all\"/>\r\n      \r\n      <View path=\"/todomvc(/:filter)\">\r\n        <Input name=\"filter\" value={({params, query, state}) => params.filter}/>\r\n      </View>\r\n    \r\n      <Action on=\"filter\" to=\"/todomvc(/:filter)\"\r\n              params={({filter}) => { return {filter} }}/>\r\n      <Action on=\"filterNotFound\" to=\"/error/404\"/>\r\n    </Dispatcher>\r\n  </Router>\r\n);\r\n\r\n//store filter variable as path parameter v_2\r\n//  `/todomvc`        ->   <TodoMVC filter=\"all\"/>\r\n//  `/todomvc/active` ->   <TodoMVC filter=\"active\"/>\r\nconst mapping_v2 = (\r\n  <Router>\r\n    <Dispatcher component={TodoMVC}>\r\n      <View path=\"/todomvc\">\r\n        <Input name=\"filter\" value=\"all\"/>\r\n      </View>\r\n      \r\n      <View path=\"/todomvc/active\">\r\n        <Input name=\"filter\" value=\"active\"/>\r\n      </View>\r\n      \r\n      <View path=\"/todomvc/completed\">\r\n        <Input name=\"filter\" value=\"completed\"/>\r\n      </View>\r\n    \r\n      <Action on=\"filter\" to=\"/todomvc(/:filter)\"\r\n              params={({filter}) => { return {filter} }}/>\r\n    </Dispatcher>\r\n  </Router>\r\n);\r\n\r\n\r\n//store filter variable as query parameter\r\n//  `/todomvc`               ->   <TodoMVC filter=\"all\"/>\r\n//  `/todomvc?filter=active` ->   <TodoMVC filter=\"active\"/>\r\nconst mapping_v3 = (\r\n  <Router>\r\n    <Dispatcher component={TodoMVC}>\r\n      {/*as default value*/}\r\n      <Input name=\"filter\" value=\"all\"/>\r\n      \r\n      <View path=\"/todomvc\">\r\n        <Input name=\"filter\" value={({params, query, state}) => query.filter}/>\r\n      </View>\r\n  \r\n      <Action on=\"filter\" to=\"/todomvc\"\r\n              query={({filter}) => { return {filter} }}/>\r\n      <Action on=\"filterNotFound\" to=\"/error/404\"/>\r\n    </Dispatcher>\r\n  </Router>\r\n);\r\n\r\n```\r\n\r\n### License\r\n\r\nMIT, Â© 2017 Dmitry Divin.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dmitrydivin/react-router-flux.git"
  },
  "scripts": {
    "build": "npm run build-cjs && npm run build-es",
    "build-cjs": "rimraf lib && cross-env BABEL_ENV=cjs babel ./src -d lib --ignore __tests__",
    "build-es": "rimraf es && cross-env BABEL_ENV=es babel ./src -d es --ignore __tests__",
    "prepublish": "npm run build",
    "test": "mocha --compilers js:babel-core/register --require jsdom-global/register --colors --bail --recursive --reporter spec src",
    "test:cov": "istanbul cover _mocha -- --compilers js:babel-core/register --require jsdom-global/register --colors --bail --recursive --reporter spec src"
  },
  "version": "1.0.0"
}
